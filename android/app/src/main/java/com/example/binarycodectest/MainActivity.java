package com.example.binarycodectest;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import java.nio.ByteBuffer;

import io.flutter.app.FlutterActivity;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryCodec;
import io.flutter.plugins.GeneratedPluginRegistrant;

public class MainActivity extends FlutterActivity {

  private static final String TAG = "BinaryCodecTest";
  private static final String CHANNEL = "binary_codec_test";

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    GeneratedPluginRegistrant.registerWith(this);

    final BasicMessageChannel<ByteBuffer> channel =
            new BasicMessageChannel<>(getFlutterView(), CHANNEL, BinaryCodec.INSTANCE);
    channel.setMessageHandler(new BasicMessageChannel.MessageHandler<ByteBuffer>() {
      @Override
      public void onMessage(ByteBuffer byteBuffer, BasicMessageChannel.Reply<ByteBuffer> reply) {
        Log.v(TAG, "Received message from Dart...");

        ByteBuffer buffer = randomBytes();
        Log.v(TAG, "Generated bytes:");
        StringBuilder sb = new StringBuilder().append('\t');
        for (byte b : buffer.array()) {
          sb.append(Byte.toString(b)).append(' ');
        }
        Log.v(TAG, sb.toString());

        Log.v(TAG, "Writing response back to Dart...");
        reply.reply(buffer);
      }
    });

    Log.v(TAG, "Queueing delayed task...");
    final Handler handler = new Handler(Looper.getMainLooper());
    Runnable sendRandomBytes = new Runnable() {
      @Override
      public void run() {
        Log.v(TAG, "Sending random bytes from platform...");
        channel.send(randomBytes());
        handler.postDelayed(this, 1000L);
      }
    };
    handler.postDelayed(sendRandomBytes, 1000L);
  }

  private ByteBuffer randomBytes() {
    byte[] bytes = new byte[8];
    for (int i = 0; i < bytes.length; i++) {
      bytes[i] = (byte) (Math.random() * 256);
    }
    return ByteBuffer.wrap(bytes);
  }
}
